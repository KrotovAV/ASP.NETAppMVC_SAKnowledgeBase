// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SAKnowledgeBase.DataBase;

#nullable disable

namespace SAKnowledgeBase.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241029131251_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SAKnowledgeBase.DataBase.Entities.Info", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FormatId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("SequenceNum")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FormatId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Infos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FormatId = 2,
                            Level = 1,
                            QuestionId = 1,
                            SequenceNum = 1,
                            Text = "Виды требований "
                        },
                        new
                        {
                            Id = 2,
                            FormatId = 4,
                            Level = 1,
                            QuestionId = 1,
                            SequenceNum = 2,
                            Text = "По Вигерсу выделяют три уровня требований:"
                        },
                        new
                        {
                            Id = 3,
                            FormatId = 4,
                            Level = 1,
                            QuestionId = 1,
                            SequenceNum = 3,
                            Text = "1. Бизнес-требования "
                        },
                        new
                        {
                            Id = 4,
                            FormatId = 4,
                            Level = 1,
                            QuestionId = 1,
                            SequenceNum = 4,
                            Text = "(описывают высокоуровневые цели организации или заказчиков системы. Например, после внедрения СДБО планируется рост выручки на 20%, уменьшение операционных расходов банка на 10%) "
                        },
                        new
                        {
                            Id = 5,
                            FormatId = 4,
                            Level = 1,
                            QuestionId = 1,
                            SequenceNum = 5,
                            Text = "2. Требования пользователей "
                        },
                        new
                        {
                            Id = 6,
                            FormatId = 4,
                            Level = 1,
                            QuestionId = 1,
                            SequenceNum = 6,
                            Text = "(описывают цели и задачи пользователя, которые позволит решить система. Use cases и User Stories описываются на этом уровне. Например, возможность осуществления банковских операций удаленно) "
                        },
                        new
                        {
                            Id = 7,
                            FormatId = 4,
                            Level = 1,
                            QuestionId = 1,
                            SequenceNum = 7,
                            Text = "3. Функциональные требования "
                        },
                        new
                        {
                            Id = 8,
                            FormatId = 4,
                            Level = 1,
                            QuestionId = 1,
                            SequenceNum = 8,
                            Text = "(описывают функциональность ПО, которую разработчики должны построить, чтобы пользователи смогли выполнить свои задачи в рамках бизнес-требований, описываются в спецификации требований к ПО (SRS). Например, открытие вклада, осуществление автоплатежей.)"
                        });
                });

            modelBuilder.Entity("SAKnowledgeBase.DataBase.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("QuestionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SequenceNum")
                        .HasColumnType("int");

                    b.Property<int>("ThemeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ThemeId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            QuestionName = "Виды требований",
                            SequenceNum = 0,
                            ThemeId = 2
                        },
                        new
                        {
                            Id = 2,
                            QuestionName = "Эстимация",
                            SequenceNum = 0,
                            ThemeId = 2
                        },
                        new
                        {
                            Id = 3,
                            QuestionName = "Управление требованиями",
                            SequenceNum = 0,
                            ThemeId = 2
                        },
                        new
                        {
                            Id = 4,
                            QuestionName = "V&S",
                            SequenceNum = 0,
                            ThemeId = 3
                        },
                        new
                        {
                            Id = 5,
                            QuestionName = "SRS",
                            SequenceNum = 0,
                            ThemeId = 3
                        },
                        new
                        {
                            Id = 6,
                            QuestionName = "ТЗ, ЧТЗ",
                            SequenceNum = 0,
                            ThemeId = 3
                        });
                });

            modelBuilder.Entity("SAKnowledgeBase.DataBase.Entities.TextFormat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Bold")
                        .HasColumnType("bit");

                    b.Property<string>("FormatName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TextSize")
                        .HasColumnType("int");

                    b.Property<bool>("Tilt")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Formats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bold = true,
                            FormatName = "Раздел",
                            TextSize = 9,
                            Tilt = false
                        },
                        new
                        {
                            Id = 2,
                            Bold = true,
                            FormatName = "Вопрос",
                            TextSize = 8,
                            Tilt = false
                        },
                        new
                        {
                            Id = 3,
                            Bold = true,
                            FormatName = "Подраздел",
                            TextSize = 7,
                            Tilt = false
                        },
                        new
                        {
                            Id = 4,
                            Bold = false,
                            FormatName = "Текст",
                            TextSize = 6,
                            Tilt = false
                        },
                        new
                        {
                            Id = 5,
                            Bold = true,
                            FormatName = "Текст жирный",
                            TextSize = 6,
                            Tilt = false
                        },
                        new
                        {
                            Id = 6,
                            Bold = false,
                            FormatName = "Перечисления",
                            TextSize = 6,
                            Tilt = false
                        },
                        new
                        {
                            Id = 7,
                            Bold = false,
                            FormatName = "Пояснение",
                            TextSize = 5,
                            Tilt = true
                        });
                });

            modelBuilder.Entity("SAKnowledgeBase.DataBase.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SequenceNum")
                        .HasColumnType("int");

                    b.Property<string>("ThemeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SequenceNum = 1,
                            ThemeName = "BA/SA Agile"
                        },
                        new
                        {
                            Id = 2,
                            SequenceNum = 2,
                            ThemeName = "Требования"
                        },
                        new
                        {
                            Id = 3,
                            SequenceNum = 3,
                            ThemeName = "Документация"
                        },
                        new
                        {
                            Id = 4,
                            SequenceNum = 4,
                            ThemeName = "Фазы проекта"
                        },
                        new
                        {
                            Id = 5,
                            SequenceNum = 5,
                            ThemeName = "Прототипирование"
                        },
                        new
                        {
                            Id = 6,
                            SequenceNum = 6,
                            ThemeName = "Моделирование"
                        },
                        new
                        {
                            Id = 7,
                            SequenceNum = 8,
                            ThemeName = "Базы Данных"
                        },
                        new
                        {
                            Id = 8,
                            SequenceNum = 9,
                            ThemeName = "Интеграции"
                        },
                        new
                        {
                            Id = 9,
                            SequenceNum = 10,
                            ThemeName = "Тестирование"
                        },
                        new
                        {
                            Id = 10,
                            SequenceNum = 11,
                            ThemeName = "SQL"
                        },
                        new
                        {
                            Id = 11,
                            SequenceNum = 7,
                            ThemeName = "Web сервисы / API"
                        });
                });

            modelBuilder.Entity("SAKnowledgeBase.DataBase.Entities.Info", b =>
                {
                    b.HasOne("SAKnowledgeBase.DataBase.Entities.TextFormat", "TextFormat")
                        .WithMany("Infos")
                        .HasForeignKey("FormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAKnowledgeBase.DataBase.Entities.Question", "Question")
                        .WithMany("Infos")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("TextFormat");
                });

            modelBuilder.Entity("SAKnowledgeBase.DataBase.Entities.Question", b =>
                {
                    b.HasOne("SAKnowledgeBase.DataBase.Entities.Theme", "Theme")
                        .WithMany("Questions")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("SAKnowledgeBase.DataBase.Entities.Question", b =>
                {
                    b.Navigation("Infos");
                });

            modelBuilder.Entity("SAKnowledgeBase.DataBase.Entities.TextFormat", b =>
                {
                    b.Navigation("Infos");
                });

            modelBuilder.Entity("SAKnowledgeBase.DataBase.Entities.Theme", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SAKnowledgeBase.DataBase;

#nullable disable

namespace SAKnowledgeBase.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SAKnowledgeBase.DataBase.Entities.Info", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FormatId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("SequenceNum")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FormatId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Infos");
                });

            modelBuilder.Entity("SAKnowledgeBase.DataBase.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("QuestionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SequenceNum")
                        .HasColumnType("int");

                    b.Property<int>("ThemeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ThemeId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("SAKnowledgeBase.DataBase.Entities.TextFormat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Bold")
                        .HasColumnType("bit");

                    b.Property<string>("FormatName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TextSize")
                        .HasColumnType("int");

                    b.Property<bool>("Tilt")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Formats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bold = true,
                            FormatName = "Раздел",
                            TextSize = 7,
                            Tilt = false
                        },
                        new
                        {
                            Id = 2,
                            Bold = true,
                            FormatName = "Вопрос",
                            TextSize = 6,
                            Tilt = false
                        },
                        new
                        {
                            Id = 3,
                            Bold = true,
                            FormatName = "Подраздел",
                            TextSize = 5,
                            Tilt = false
                        },
                        new
                        {
                            Id = 4,
                            Bold = false,
                            FormatName = "Текст",
                            TextSize = 4,
                            Tilt = false
                        },
                        new
                        {
                            Id = 5,
                            Bold = true,
                            FormatName = "Текст жирный",
                            TextSize = 4,
                            Tilt = false
                        },
                        new
                        {
                            Id = 6,
                            Bold = false,
                            FormatName = "Перечисления",
                            TextSize = 4,
                            Tilt = false
                        },
                        new
                        {
                            Id = 7,
                            Bold = false,
                            FormatName = "Пояснение",
                            TextSize = 3,
                            Tilt = true
                        });
                });

            modelBuilder.Entity("SAKnowledgeBase.DataBase.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SequenceNum")
                        .HasColumnType("int");

                    b.Property<string>("ThemeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("SAKnowledgeBase.DataBase.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin@ad.min",
                            Password = new byte[] { 90, 134, 225, 217, 40, 237, 44, 134, 95, 104, 34, 83, 248, 217, 204, 173, 235, 111, 189, 196, 96, 130, 24, 13, 214, 172, 39, 103, 141, 240, 177, 244, 41, 252, 47, 217, 75, 241, 148, 60, 38, 241, 245, 167, 71, 234, 107, 191, 237, 61, 38, 67, 238, 44, 67, 109, 68, 232, 34, 163, 134, 88, 159, 125 },
                            Role = 0,
                            Salt = new byte[] { 37, 6, 204, 204, 32, 31, 160, 71, 178, 188, 87, 118, 38, 90, 251, 5 }
                        });
                });

            modelBuilder.Entity("SAKnowledgeBase.DataBase.Entities.Info", b =>
                {
                    b.HasOne("SAKnowledgeBase.DataBase.Entities.TextFormat", "TextFormat")
                        .WithMany("Infos")
                        .HasForeignKey("FormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAKnowledgeBase.DataBase.Entities.Question", "Question")
                        .WithMany("Infos")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("TextFormat");
                });

            modelBuilder.Entity("SAKnowledgeBase.DataBase.Entities.Question", b =>
                {
                    b.HasOne("SAKnowledgeBase.DataBase.Entities.Theme", "Theme")
                        .WithMany("Questions")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("SAKnowledgeBase.DataBase.Entities.Question", b =>
                {
                    b.Navigation("Infos");
                });

            modelBuilder.Entity("SAKnowledgeBase.DataBase.Entities.TextFormat", b =>
                {
                    b.Navigation("Infos");
                });

            modelBuilder.Entity("SAKnowledgeBase.DataBase.Entities.Theme", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
